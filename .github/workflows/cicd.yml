# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: ["main"]

# 워크플로우 실행 권한 설정
permissions:
  contents: read # 리포지토리 코드 읽기 권한
  # packages: write # Docker Hub 등 패키지 레지스트리에 푸시할 때 필요할 수 있음 (Docker Hub는 보통 인증으로 충분)

jobs:
  CI-CD:
    runs-on: ubuntu-latest # GitHub Actions Runner 환경 (최신 Ubuntu)

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 설정 - GitHub Actions 빌드 환경에서 사용할 JDK 설정 #
      # 프로젝트 빌드 시 필요한 Java 버전과 동일하게 설정하는 것이 좋음
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin' # Adoptium Temurin 배포판 사용

      # 3. Gradle 캐싱 - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. application.properties 생성 (선택 사항: DB 정보만 secrets에서 주입하는 경우)
      # 이전에 APPLICATION Secret에 파일 전체 내용을 넣는 방식을 사용하셨다면 이 스텝이 필요할 수 있습니다.
      # 하지만, 일반적으로 application.properties는 리포지토리에 커밋하고,
      # 민감한 DB 정보만 docker run 시 -e 옵션으로 주입하는 것이 더 권장됩니다.
      # 만약 application.properties에 ${DB_URL} 등 환경변수만 있고,
      # GitHub Actions Secrets에서 DB_URL 등을 직접 주입한다면, 이 스텝은 필요 없습니다.
      # 이 스텝은 secrets.APPLICATION에 application.properties 전체 내용이 있다고 가정합니다.
      #- name: Create application.properties with secrets
      #  run: |
      #    echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      #    echo "Contents of application.properties:"
      #    cat ./src/main/resources/application.properties
      #    ls -al ./src/main/resources/application.properties


      # 5. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test # 테스트 제외하고 빌드

      # 6. Docker 이미지 빌드 및 Docker Hub로 푸시
      - name: Docker build & push to Docker Hub
        if: contains(github.ref, 'main') # main 브랜치에 푸시되었을 때만 실행
        run: |
          # Docker Hub 로그인
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
          # Docker 이미지 빌드
          # --platform linux/amd64/v3 는 EC2 아키텍처에 맞춤
          sudo docker build --platform linux/amd64/v3 -t "${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROJECT }}:latest" .
          
          # Docker 이미지 푸시
          sudo docker push "${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROJECT }}:latest"

      # 7. EC2 서버로 배포하는 작업 (SSH 접속 후 Docker 명령 실행)
      - name: Deploy to EC2 production server
        uses: appleboy/ssh-action@master # SSH 접속 액션
        id: deploy-prod # 스텝 ID
        if: contains(github.ref, 'main') # main 브랜치에 푸시되었을 때만 실행
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu # EC2 사용자 이름 (AMI에 따라 ec2-user 등 다를 수 있음)
          key: ${{ secrets.PRIVATE_KEY }} # SSH 접속 Private Key
          # envs: GITHUB_SHA # GitHub SHA를 EC2 환경 변수로 넘길 필요가 있다면 사용

          # SSH 접속 후 실행할 스크립트
          script: |
            echo "Stopping and removing existing Docker containers..."
            # 기존 'project' 이름의 컨테이너를 중지하고 삭제
            # -q: ID만 출력, --filter "name=project": 이름이 'project'인 컨테이너 필터링
            sudo docker stop $(sudo docker ps -q --filter "name=project") || true # 실행 중인 컨테이너가 없어도 에러나지 않도록 || true 추가
            sudo docker rm $(sudo docker ps -aq --filter "name=project") || true # 모든 상태의 'project' 컨테이너 삭제

            echo "Pulling the latest Docker image from Docker Hub..."
            # Docker Hub에서 최신 이미지 Pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROJECT }}:latest

            echo "Running the new Docker container..."
            # 새 컨테이너 실행
            # --name project: 컨테이너 이름 설정
            # -d: 데몬 모드로 백그라운드 실행
            # -p 8081:8081: 호스트의 8081 포트를 컨테이너의 8081 포트에 매핑 (application.properties와 일치)
            # -e: 환경 변수 주입 (DB 접속 정보) - GitHub Secrets에서 가져옴
            sudo docker run -d \
              --name project \
              -p 8081:8081 \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROJECT }}:latest

            echo "New container started. Checking logs..."
            # 컨테이너 시작 후 초기 로그 확인 (선택 사항)
            # sleep 5 # 컨테이너가 완전히 시작될 때까지 잠시 대기
            # sudo docker logs project

            echo "Cleaning up unused Docker images..."
            # 사용되지 않는 Docker 이미지 정리 (디스크 공간 확보)
            sudo docker image prune -f
            echo "Deployment finished."