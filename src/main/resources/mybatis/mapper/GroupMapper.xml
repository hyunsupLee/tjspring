<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ex.tjspring.study.dao.GroupDao">

    <!-- ResultMap 정의 -->
    <resultMap id="GroupDtoResultMap" type="com.ex.tjspring.study.dto.GroupDto">
        <id property="groupId" column="GROUP_ID"/>
        <result property="groupName" column="GROUP_NAME"/>
        <result property="category" column="CATEGORY"/>
        <result property="maxMembers" column="MAX_MEMBERS"/>
        <result property="studyMode" column="STUDY_MODE"/>
        <result property="region" column="REGION"/>
        <result property="contact" column="CONTACT"/>
        <result property="groupIntroduction" column="GROUP_INTRODUCTION"/>
        <result property="groupOwnerId" column="GROUP_OWNER_ID"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="thumbnail" column="THUMBNAIL"/>
        <result property="membershipStatus" column="MEMBERSHIP_STATUS"/>
        <result property="nickname" column="NICKNAME"/>
        <result property="memberRole" column="MEMBER_ROLE"/>
        <result property="ownerNickname" column="OWNER_NICKNAME"/>
        <result property="ownerProfileImage" column="OWNER_PROFILE_IMAGE"/>
    </resultMap>


    <!--그룹 생성-->
    <insert id="insert" parameterType="com.ex.tjspring.study.dto.GroupDto">
        <selectKey keyProperty="groupId" resultType="long" order="BEFORE">
            SELECT SEQ_STUDY_GROUPS_ID.NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO STUDY_GROUPS (
        GROUP_ID, GROUP_NAME, CATEGORY, MAX_MEMBERS, STUDY_MODE, REGION,
        CONTACT, GROUP_INTRODUCTION, THUMBNAIL, GROUP_OWNER_ID, CREATED_AT
        ) VALUES (
        #{groupId}, #{groupName}, #{category}, #{maxMembers}, #{studyMode}, #{region},
        #{contact}, #{groupIntroduction}, #{thumbnail, jdbcType=VARCHAR}, #{groupOwnerId}, SYSDATE
        )
    </insert>

    <!--스터디 멤버십 등록 ( 그룹 생성자 자동 추가)-->
    <insert id="insertMembership" parameterType="com.ex.tjspring.study.dto.GroupDto">
        INSERT INTO STUDY_MEMBERSHIP (
        GROUP_ID, USER_ID, NICKNAME, MEMBERSHIP_STATUS, MEMBER_ROLE, JOINED_AT
        ) VALUES (
        #{groupId}, #{groupOwnerId}, #{nickname}, 'ACTIVE', #{memberRole}, SYSDATE
        )
    </insert>

    <!-- 사용자 닉네임 조회 -->
    <select id="selectUserNickname" parameterType="java.lang.Long" resultType="String">
        SELECT NICKNAME
        FROM USERS
        WHERE ID = #{userId}
    </select>

    <!-- ID로 특정 그룹 조회 - 그룹장 닉네임 및 프로필 이미지 포함 -->
    <select id="selectGroupById" parameterType="java.lang.Long" resultMap="GroupDtoResultMap">
        SELECT
        sg.GROUP_ID,
        sg.GROUP_NAME,
        sg.CATEGORY,
        sg.MAX_MEMBERS,
        sg.STUDY_MODE,
        sg.REGION,
        sg.CONTACT,
        sg.GROUP_INTRODUCTION,
        sg.THUMBNAIL,
        sg.GROUP_OWNER_ID,
        sg.CREATED_AT,
        sm.MEMBERSHIP_STATUS,
        sm.NICKNAME,
        sm.MEMBER_ROLE,
        owner_sm.NICKNAME as OWNER_NICKNAME,
        u.PROFILE_IMAGE as OWNER_PROFILE_IMAGE
        FROM STUDY_GROUPS sg
        LEFT JOIN STUDY_MEMBERSHIP sm
        ON sg.GROUP_ID = sm.GROUP_ID
        AND sm.USER_ID = sg.GROUP_OWNER_ID
        LEFT JOIN STUDY_MEMBERSHIP owner_sm
        ON sg.GROUP_ID = owner_sm.GROUP_ID
        AND sg.GROUP_OWNER_ID = owner_sm.USER_ID
        AND owner_sm.MEMBERSHIP_STATUS = 'ACTIVE'
        LEFT JOIN USERS u
        ON sg.GROUP_OWNER_ID = u.ID
        WHERE sg.GROUP_ID = #{id}
    </select>

    <!-- 전체 그룹 조회 - 그룹장 닉네임 포함 -->
    <select id="selectAllGroups" resultMap="GroupDtoResultMap">
        SELECT
        sg.GROUP_ID,
        sg.GROUP_NAME,
        sg.CATEGORY,
        sg.MAX_MEMBERS,
        sg.STUDY_MODE,
        sg.REGION,
        sg.CONTACT,
        sg.GROUP_INTRODUCTION,
        sg.THUMBNAIL,
        sg.GROUP_OWNER_ID,
        sg.CREATED_AT,
        NULL as MEMBERSHIP_STATUS,
        NULL as NICKNAME,
        NULL as MEMBER_ROLE,
        owner_sm.NICKNAME as OWNER_NICKNAME
        FROM STUDY_GROUPS sg
        LEFT JOIN STUDY_MEMBERSHIP owner_sm
        ON sg.GROUP_ID = owner_sm.GROUP_ID
        AND sg.GROUP_OWNER_ID = owner_sm.USER_ID
        AND owner_sm.MEMBERSHIP_STATUS = 'ACTIVE'
        ORDER BY sg.CREATED_AT DESC
    </select>

    <!-- 사용자가 참여한 모든 스터디 그룹 조회 - 그룹장 닉네임 포함 -->
    <select id="findByUserId" parameterType="java.lang.Long" resultMap="GroupDtoResultMap">
        SELECT
        sg.GROUP_ID,
        sg.GROUP_NAME,
        sg.CATEGORY,
        sg.MAX_MEMBERS,
        sg.STUDY_MODE,
        sg.REGION,
        sg.CONTACT,
        sg.GROUP_INTRODUCTION,
        sg.THUMBNAIL,
        sg.GROUP_OWNER_ID,
        sg.CREATED_AT,
        sm.MEMBERSHIP_STATUS,
        sm.NICKNAME,
        sm.MEMBER_ROLE,
        owner_sm.NICKNAME as OWNER_NICKNAME
        FROM STUDY_GROUPS sg
        INNER JOIN STUDY_MEMBERSHIP sm ON sg.GROUP_ID = sm.GROUP_ID
        LEFT JOIN STUDY_MEMBERSHIP owner_sm
        ON sg.GROUP_ID = owner_sm.GROUP_ID
        AND sg.GROUP_OWNER_ID = owner_sm.USER_ID
        AND owner_sm.MEMBERSHIP_STATUS = 'ACTIVE'
        WHERE sm.USER_ID = #{userId}
        ORDER BY sg.CREATED_AT DESC
    </select>

    <!-- 사용자가 현재 활성 참여 중인 스터디 그룹만 조회 - 그룹장 닉네임 포함 -->
    <select id="findActiveByUserId" parameterType="java.lang.Long" resultMap="GroupDtoResultMap">
        SELECT
        sg.GROUP_ID,
        sg.GROUP_NAME,
        sg.CATEGORY,
        sg.MAX_MEMBERS,
        sg.STUDY_MODE,
        sg.REGION,
        sg.CONTACT,
        sg.GROUP_INTRODUCTION,
        sg.THUMBNAIL,
        sg.GROUP_OWNER_ID,
        sg.CREATED_AT,
        sm.MEMBERSHIP_STATUS,
        sm.NICKNAME,
        sm.MEMBER_ROLE,
        owner_sm.NICKNAME as OWNER_NICKNAME
        FROM STUDY_GROUPS sg
        INNER JOIN STUDY_MEMBERSHIP sm ON sg.GROUP_ID = sm.GROUP_ID
        LEFT JOIN STUDY_MEMBERSHIP owner_sm
        ON sg.GROUP_ID = owner_sm.GROUP_ID
        AND sg.GROUP_OWNER_ID = owner_sm.USER_ID
        AND owner_sm.MEMBERSHIP_STATUS = 'ACTIVE'
        WHERE sm.USER_ID = #{userId}
        AND sm.MEMBERSHIP_STATUS = 'ACTIVE'
        ORDER BY sg.CREATED_AT DESC
    </select>

    <!--그룹 정보 수정-->
    <update id="update" parameterType="com.ex.tjspring.study.dto.GroupDto">
        UPDATE STUDY_GROUPS
        SET GROUP_NAME = #{groupName},
        MAX_MEMBERS = #{maxMembers},
        CONTACT = #{contact},
        GROUP_INTRODUCTION = #{groupIntroduction},
        THUMBNAIL = #{thumbnail}
        WHERE GROUP_ID = #{groupId}
    </update>

    <!--멤버십 닉네임 수정-->
    <update id="updateNickname" parameterType="com.ex.tjspring.study.dto.GroupDto">
        UPDATE STUDY_MEMBERSHIP
        SET NICKNAME = #{nickname}
        WHERE GROUP_ID = #{groupId}
        AND USER_ID = #{groupOwnerId}
        AND MEMBERSHIP_STATUS = 'ACTIVE'
    </update>

    <!--그룹 삭제-->
    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM STUDY_GROUPS
        WHERE GROUP_ID = #{id}
    </delete>

    <!-- 그룹의 모든 멤버십 삭제 -->
    <delete id="deleteMembershipsByGroupId" parameterType="java.lang.Long">
        DELETE FROM STUDY_MEMBERSHIP
        WHERE GROUP_ID = #{groupId}
    </delete>

    <!--그룹명 중복 확인-->
    <select id="existsByGroupName" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM STUDY_GROUPS WHERE GROUP_NAME = #{groupName}
    </select>

    <!--그룹 멤버 수 조회-->
    <select id="countMembersByGroupId" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM STUDY_MEMBERSHIP
        WHERE GROUP_ID = #{groupId}
        AND MEMBERSHIP_STATUS = 'ACTIVE'
    </select>


</mapper>